from game_message import Position, Tick, Action, Spawn, Sail, Dock, Anchor, TideLevels, directions, Map

from pathfinding.core.diagonal_movement import DiagonalMovement
from pathfinding.core.grid import Grid
from pathfinding.finder.a_star import AStarFinder

def distance(p1: Position, p2: Position):
    return abs(p1.row - p2.row) + abs(p1.column - p2.column)
def get_direction(boat: Position, point: Position):
    est_ouest = ''
    if boat.column < point.column:
        est_ouest = 'E'
    elif boat.column > point.column:
        est_ouest = 'W'
    nord_sud = ''
    if boat.row > point.row:
        nord_sud = 'N'
    elif boat.row < point.row:
        nord_sud = 'S'
    return nord_sud + est_ouest

def get_next_port_id(tick):
    distances = {}
    for i, port in enumerate(tick.map.ports):
        distances[i] = distance(tick.currentLocation, port)
    
    min_i = sorted(list(distances.keys()), key=lambda i: distances[i] if i not in tick.visitedPortIndices else 10000)
    return min_i

def find_path(tick:Tick, min_i):
    for row in tick.map.topology:
        for cell in row:
            if cell >= tick.tideSchedule[0]:
                cell = -1
    grid = Grid(matrix=tick.map.topology)
    finder = AStarFinder(diagonal_movement=DiagonalMovement.only_when_no_obstacle)
    start = grid.node(tick.currentLocation.row, tick.currentLocation.column)
    end = grid.node(tick.map.ports[min_i[0]].row, tick.map.ports[min_i[0]].column)
    path, runs = finder.find_path(start, end, grid)
    return path

class Bot:
    def __init__(self):
        print("Initializing your super mega duper bot")
        
    def get_next_move(self, tick: Tick) -> Action:
        """
        Here is where the magic happens, for now the move is random. I bet you can do better ;)
        """
        print('TOPOLOGIE : ')
        print(tick.map.topology)
        print('PORTS : ')
        print(tick.map.ports)
        if tick.currentLocation is None:
            return Spawn(tick.map.ports[0])
            
        min_i = get_next_port_id(tick)
        if len(min_i) == 0:
            tick.visitedPortIndices = tick.visitedPortIndices[1:]
            min_i = get_next_port_id(tick)


        path = find_path(tick, min_i)
        
        print('PATH : ')
        print(path)
        if len(path) >= 2:
            next_step = Position(row=path[1][0], column=path[1][1])
        else:
            next_step = tick.currentLocation
        direction = get_direction(tick.currentLocation, next_step)
        print(f'DIRECTION : {direction}')
        
        if direction == '':
            return Dock()
        else:
            return Sail(direction)

if __name__ == '__main__':
    bot = Bot()
    ports = [Position(row=24, column=13), Position(row=51, column=35), Position(row=49, column=9), Position(row=51, column=15), Position(row=18, column=8), Position(row=22, column=20), Position(row=49, column=48), Position(row=50, column=25), Position(row=18, column=39), Position(row=32, column=16), Position(row=42, column=40), Position(row=34, column=45), Position(row=19, column=27), Position(row=15, column=47), Position(row=44, column=14), Position(row=36, column=33), Position(row=8, column=23), Position(row=30, column=6)]
    topologie = [[5, 3, 4, 4, 4, 4, 4, 4, 4, 5, 6, 6, 6, 8, 8, 9, 8, 8, 10, 11, 10, 8, 8, 8, 5, 3, 4, 5, 7, 8, 9, 10, 8, 7, 6, 6, 6, 7, 7, 6, 5, 5, 6, 6, 7, 8, 9, 9, 10, 9, 9, 9, 8, 6, 7, 6, 5, 4, 6, 7], [5, 5, 5, 5, 4, 3, 3, 3, 4, 7, 5, 4, 5, 7, 8, 9, 10, 10, 10, 11, 9, 6, 7, 8, 5, 3, 3, 4, 7, 10, 11, 12, 11, 10, 9, 8, 8, 9, 8, 6, 5, 5, 7, 8, 7, 6, 7, 7, 8, 9, 9, 9, 6, 5, 7, 7, 5, 3, 5, 7], [4, 4, 5, 5, 4, 3, 3, 3, 4, 5, 4, 4, 5, 7, 8, 10, 10, 10, 9, 9, 9, 8, 8, 8, 5, 3, 3, 4, 7, 10, 12, 13, 12, 10, 9, 9, 9, 9, 8, 7, 7, 8, 9, 8, 7, 6, 7, 7, 8, 9, 8, 7, 6, 5, 6, 6, 5, 4, 5, 6], [3, 2, 4, 5, 6, 5, 4, 4, 5, 5, 5, 5, 5, 6, 7, 9, 10, 10, 8, 7, 8, 9, 8, 6, 5, 4, 4, 4, 7, 10, 12, 12, 12, 10, 10, 9, 9, 9, 8, 7, 9, 11, 9, 7, 6, 6, 7, 9, 9, 9, 8, 7, 6, 6, 5, 4, 4, 5, 5, 5], [3, 4, 4, 6, 6, 6, 5, 4, 6, 7, 7, 7, 6, 6, 5, 5, 8, 8, 7, 5, 5, 6, 5, 4, 4, 6, 5, 5, 7, 10, 9, 10, 10, 10, 9, 9, 9, 10, 9, 9, 9, 10, 9, 8, 7, 6, 6, 7, 9, 9, 9, 9, 9, 8, 6, 4, 4, 5, 5, 5], [5, 5, 5, 5, 7, 7, 6, 5, 7, 8, 8, 8, 8, 8, 5, 2, 5, 7, 5, 4, 4, 3, 3, 3, 6, 7, 7, 7, 7, 9, 9, 9, 10, 10, 9, 9, 9, 10, 11, 12, 11, 11, 10, 8, 7, 7, 7, 7, 8, 9, 9, 10, 11, 11, 8, 5, 5, 7, 6, 5], [3, 3, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 7, 6, 4, 2, 4, 5, 4, 3, 4, 4, 4, 6, 8, 9, 9, 9, 8, 9, 10, 10, 11, 11, 9, 8, 8, 9, 11, 13, 12, 11, 11, 10, 8, 8, 7, 8, 9, 11, 10, 10, 11, 11, 8, 4, 4, 5, 6, 6], [3, 3, 5, 7, 8, 7, 9, 10, 10, 9, 7, 7, 6, 4, 3, 2, 3, 5, 4, 4, 5, 5, 6, 8, 10, 11, 10, 10, 10, 9, 11, 12, 13, 13, 9, 5, 7, 9, 11, 13, 11, 10, 11, 11, 9, 8, 7, 7, 10, 12, 11, 10, 11, 11, 8, 4, 4, 4, 6, 8], [3, 3, 5, 7, 8, 8, 9, 9, 9, 9, 8, 8, 7, 5, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8, 9, 10, 10, 10, 9, 11, 13, 12, 11, 9, 6, 7, 10, 11, 13, 12, 12, 12, 11, 10, 8, 7, 7, 10, 12, 12, 12, 11, 10, 7, 4, 4, 4, 6, 9], [3, 4, 6, 8, 9, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 4, 4, 5, 6, 7, 6, 6, 5, 6, 7, 9, 11, 9, 7, 9, 11, 10, 8, 7, 6, 8, 9, 11, 12, 12, 13, 12, 11, 10, 8, 8, 8, 9, 10, 11, 12, 10, 9, 6, 3, 4, 4, 7, 9], [6, 7, 7, 7, 8, 8, 8, 8, 8, 7, 6, 6, 5, 3, 4, 4, 5, 6, 6, 6, 8, 7, 6, 6, 7, 8, 9, 10, 9, 7, 7, 8, 8, 7, 6, 5, 6, 8, 9, 11, 11, 11, 10, 9, 9, 8, 8, 8, 9, 10, 10, 10, 9, 7, 7, 5, 5, 4, 5, 7], [10, 10, 7, 6, 7, 7, 7, 8, 7, 5, 4, 5, 4, 3, 3, 4, 5, 7, 6, 6, 8, 8, 6, 7, 7, 7, 8, 9, 9, 7, 5, 5, 5, 6, 5, 4, 4, 6, 8, 9, 9, 8, 8, 7, 8, 9, 8, 8, 9, 9, 9, 9, 7, 5, 7, 7, 6, 5, 4, 4], [9, 9, 8, 7, 7, 7, 7, 7, 6, 4, 3, 4, 3, 2, 3, 3, 4, 5, 6, 7, 8, 9, 7, 7, 7, 8, 9, 9, 8, 6, 4, 4, 4, 5, 4, 2, 2, 4, 6, 8, 7, 7, 8, 9, 9, 9, 9, 8, 8, 7, 7, 8, 7, 7, 7, 6, 6, 6, 5, 5], [8, 7, 7, 7, 7, 8, 7, 6, 6, 5, 4, 4, 3, 1, 1, 1, 2, 4, 6, 7, 9, 10, 8, 7, 8, 9, 9, 9, 7, 5, 5, 6, 5, 6, 4, 2, 3, 4, 6, 8, 7, 7, 8, 10, 10, 10, 9, 7, 7, 6, 6, 7, 8, 9, 8, 6, 5, 5, 5, 5], [8, 7, 7, 8, 7, 7, 7, 6, 6, 6, 5, 5, 3, 1, 2, 3, 3, 4, 7, 8, 9, 9, 8, 6, 7, 8, 8, 8, 6, 5, 5, 6, 5, 5, 4, 4, 5, 6, 6, 5, 5, 6, 6, 8, 8, 8, 7, 6, 5, 5, 6, 7, 8, 7, 7, 7, 6, 5, 4, 3], [8, 7, 7, 8, 7, 5, 6, 6, 7, 7, 7, 6, 5, 4, 4, 4, 4, 4, 7, 9, 9, 8, 7, 7, 7, 7, 7, 7, 6, 5, 6, 7, 6, 5, 4, 4, 6, 8, 6, 4, 4, 4, 5, 7, 6, 5, 5, 5, 4, 3, 5, 7, 6, 5, 7, 9, 7, 5, 4, 2], [6, 5, 5, 6, 6, 6, 6, 6, 7, 9, 9, 9, 8, 7, 6, 5, 3, 4, 6, 9, 10, 10, 9, 8, 8, 7, 6, 6, 8, 9, 9, 9, 9, 8, 7, 6, 6, 7, 6, 5, 4, 5, 5, 6, 5, 4, 4, 5, 5, 4, 4, 4, 4, 4, 7, 8, 6, 4, 3, 3], [4, 3, 4, 4, 5, 6, 7, 6, 8, 10, 12, 12, 11, 8, 6, 5, 3, 2, 5, 8, 10, 12, 11, 8, 7, 6, 5, 5, 9, 12, 12, 10, 11, 11, 10, 8, 7, 5, 5, 5, 4, 5, 5, 5, 4, 3, 5, 6, 5, 5, 3, 2, 3, 4, 6, 8, 6, 3, 3, 3], [4, 4, 4, 5, 5, 4, 5, 6, 7, 10, 11, 11, 11, 9, 7, 5, 3, 2, 5, 8, 9, 10, 9, 6, 5, 5, 5, 7, 9, 11, 11, 10, 11, 12, 10, 10, 9, 8, 7, 6, 4, 3, 3, 4, 4, 3, 5, 6, 6, 6, 3, 2, 3, 4, 6, 8, 6, 4, 4, 4], [4, 5, 4, 5, 3, 2, 3, 4, 6, 8, 9, 9, 10, 10, 8, 5, 4, 3, 5, 7, 7, 7, 6, 4, 4, 4, 6, 8, 9, 10, 11, 11, 12, 12, 11, 10, 11, 11, 9, 7, 4, 2, 2, 3, 4, 5, 6, 7, 7, 6, 4, 3, 3, 3, 5, 7, 6, 5, 5, 4], [4, 5, 4, 4, 4, 4, 4, 5, 7, 8, 8, 9, 9, 8, 6, 4, 3, 3, 5, 7, 7, 6, 5, 5, 5, 6, 7, 8, 9, 11, 12, 13, 13, 12, 11, 11, 11, 11, 10, 7, 4, 1, 2, 3, 5, 6, 7, 8, 7, 7, 5, 3, 3, 4, 5, 5, 5, 4, 4, 4], [5, 6, 5, 4, 5, 5, 6, 6, 7, 8, 8, 9, 8, 6, 4, 3, 3, 3, 5, 6, 6, 5, 5, 5, 6, 8, 8, 8, 9, 11, 13, 15, 13, 11, 11, 11, 11, 11, 10, 8, 4, 1, 1, 3, 5, 7, 8, 9, 8, 8, 5, 3, 4, 5, 5, 4, 4, 3, 3, 3], [4, 5, 4, 3, 4, 5, 4, 4, 6, 8, 8, 8, 7, 5, 4, 3, 4, 5, 5, 5, 6, 6, 5, 5, 6, 8, 8, 8, 10, 12, 11, 12, 12, 10, 9, 10, 10, 10, 9, 8, 5, 2, 2, 4, 6, 8, 9, 8, 8, 7, 4, 3, 4, 5, 4, 3, 3, 4, 4, 5], [4, 5, 4, 3, 3, 4, 3, 3, 5, 7, 7, 7, 6, 5, 4, 4, 5, 6, 4, 4, 7, 8, 7, 6, 7, 8, 9, 9, 11, 12, 10, 9, 10, 9, 8, 7, 8, 7, 8, 8, 6, 3, 3, 4, 7, 10, 9, 8, 8, 7, 3, 2, 4, 6, 4, 3, 4, 5, 5, 7], [5, 5, 4, 3, 2, 2, 3, 4, 4, 5, 6, 6, 6, 4, 5, 5, 5, 5, 4, 5, 7, 8, 8, 7, 8, 10, 10, 9, 10, 10, 9, 9, 7, 7, 7, 6, 7, 7, 7, 8, 5, 3, 3, 5, 6, 8, 9, 10, 9, 8, 6, 4, 6, 6, 5, 4, 5, 5, 5, 6], [7, 6, 4, 2, 1, 1, 3, 4, 5, 5, 5, 6, 5, 3, 5, 7, 6, 5, 5, 6, 7, 8, 8, 8, 9, 10, 10, 9, 9, 8, 8, 8, 6, 4, 6, 7, 7, 6, 6, 6, 4, 3, 4, 7, 7, 6, 8, 10, 10, 8, 7, 7, 8, 8, 6, 5, 5, 5, 5, 6], [9, 8, 7, 5, 4, 3, 3, 3, 3, 3, 3, 4, 3, 2, 3, 4, 4, 4, 5, 7, 9, 10, 10, 10, 9, 8, 8, 8, 7, 6, 4, 4, 4, 3, 4, 4, 4, 4, 4, 5, 4, 4, 4, 5, 7, 8, 9, 10, 11, 9, 8, 8, 10, 11, 9, 8, 7, 7, 7, 8], [9, 10, 10, 9, 8, 6, 4, 2, 1, 1, 2, 2, 1, 1, 2, 2, 2, 3, 5, 8, 10, 10, 10, 11, 9, 7, 7, 6, 5, 5, 3, 1, 2, 3, 2, 2, 2, 3, 5, 6, 5, 5, 3, 4, 7, 9, 10, 11, 10, 9, 8, 8, 10, 12, 11, 10, 8, 7, 7, 9], [9, 9, 9, 8, 7, 6, 4, 3, 2, 2, 3, 4, 3, 1, 2, 2, 2, 2, 4, 6, 8, 9, 9, 10, 9, 9, 9, 9, 8, 7, 4, 2, 2, 3, 3, 4, 4, 4, 5, 6, 5, 4, 4, 5, 7, 9, 10, 10, 9, 9, 8, 7, 9, 9, 9, 9, 9, 9, 9, 11], [9, 8, 8, 7, 7, 7, 6, 5, 5, 5, 6, 7, 5, 2, 3, 3, 2, 1, 3, 5, 6, 7, 7, 8, 9, 10, 10, 10, 9, 8, 5, 2, 3, 3, 4, 6, 5, 5, 6, 6, 5, 4, 5, 6, 8, 9, 9, 9, 8, 7, 7, 7, 7, 5, 6, 8, 8, 10, 11, 13], [10, 9, 9, 8, 8, 7, 8, 8, 7, 7, 6, 7, 7, 6, 5, 3, 2, 2, 3, 4, 6, 7, 7, 8, 8, 7, 8, 8, 7, 5, 3, 3, 3, 4, 3, 3, 4, 4, 5, 5, 5, 5, 6, 6, 5, 5, 6, 6, 6, 5, 5, 5, 6, 5, 5, 5, 6, 7, 9, 11], [10, 10, 10, 9, 8, 7, 9, 11, 10, 8, 6, 6, 8, 9, 6, 3, 2, 2, 3, 4, 5, 7, 7, 8, 6, 4, 5, 6, 4, 2, 2, 3, 4, 4, 2, 0, 2, 3, 4, 4, 5, 6, 6, 6, 4, 2, 3, 4, 4, 3, 3, 3, 5, 6, 4, 3, 4, 5, 7, 10], [11, 11, 10, 8, 8, 8, 9, 9, 9, 7, 6, 7, 10, 10, 6, 3, 3, 3, 4, 4, 5, 6, 7, 6, 5, 3, 4, 5, 4, 3, 3, 1, 2, 3, 2, 0, 0, 1, 2, 4, 4, 5, 5, 4, 3, 2, 3, 4, 4, 4, 3, 3, 3, 4, 4, 3, 3, 5, 7, 10], [11, 11, 9, 8, 8, 8, 8, 7, 7, 6, 6, 8, 10, 10, 7, 4, 5, 6, 6, 5, 6, 6, 6, 6, 5, 3, 3, 3, 4, 5, 3, 1, 1, 3, 2, 0, 0, 0, 1, 3, 4, 5, 3, 2, 2, 2, 3, 4, 5, 6, 5, 3, 3, 4, 4, 4, 4, 5, 7, 9], [11, 11, 8, 7, 8, 8, 8, 7, 8, 8, 7, 7, 9, 11, 9, 6, 7, 8, 7, 6, 6, 6, 7, 8, 6, 5, 4, 3, 5, 6, 4, 1, 2, 3, 1, 0, 1, 1, 2, 3, 3, 3, 3, 3, 2, 1, 2, 4, 6, 6, 4, 3, 4, 5, 6, 7, 6, 5, 7, 9], [11, 11, 9, 6, 8, 8, 8, 8, 9, 11, 9, 8, 10, 12, 10, 8, 9, 10, 8, 8, 8, 7, 8, 9, 8, 7, 5, 4, 6, 7, 5, 2, 3, 5, 3, 0, 2, 4, 4, 4, 3, 2, 3, 4, 2, 1, 4, 5, 5, 5, 3, 2, 3, 6, 8, 10, 8, 6, 7, 9], [10, 10, 9, 7, 7, 7, 8, 8, 10, 12, 11, 10, 11, 12, 12, 11, 11, 10, 10, 11, 10, 9, 9, 9, 8, 8, 7, 7, 7, 6, 5, 4, 4, 4, 3, 2, 3, 4, 4, 4, 3, 4, 3, 3, 3, 5, 6, 5, 4, 4, 3, 3, 4, 6, 9, 11, 10, 8, 9, 9], [10, 10, 9, 7, 7, 7, 8, 9, 10, 11, 13, 14, 13, 12, 13, 14, 12, 10, 10, 12, 12, 11, 9, 8, 8, 9, 9, 10, 8, 5, 6, 6, 5, 3, 3, 3, 3, 4, 4, 4, 5, 6, 4, 2, 5, 8, 7, 4, 4, 3, 4, 5, 5, 6, 9, 11, 11, 10, 10, 10], [10, 9, 9, 9, 9, 9, 9, 10, 11, 12, 13, 14, 13, 12, 12, 12, 12, 10, 9, 9, 10, 10, 9, 8, 8, 8, 8, 8, 7, 6, 6, 6, 5, 3, 3, 3, 3, 4, 4, 4, 4, 5, 4, 4, 6, 8, 7, 5, 5, 5, 5, 5, 6, 7, 8, 10, 10, 9, 9, 9], [10, 8, 9, 10, 10, 10, 10, 10, 11, 12, 13, 14, 13, 12, 10, 10, 9, 9, 7, 6, 7, 8, 8, 8, 8, 7, 7, 6, 7, 7, 6, 5, 4, 3, 3, 3, 3, 4, 4, 3, 4, 5, 5, 6, 7, 8, 8, 7, 7, 7, 5, 5, 5, 7, 7, 7, 8, 8, 8, 7], [9, 9, 9, 9, 10, 10, 10, 9, 9, 9, 10, 11, 10, 9, 7, 7, 7, 7, 6, 6, 7, 8, 8, 7, 9, 9, 9, 8, 8, 7, 6, 5, 3, 2, 2, 4, 4, 5, 6, 6, 6, 6, 7, 8, 8, 8, 9, 9, 7, 6, 5, 4, 4, 6, 6, 7, 7, 7, 7, 5], [9, 11, 10, 8, 10, 11, 10, 9, 8, 7, 8, 9, 8, 7, 5, 4, 5, 6, 6, 6, 7, 8, 7, 7, 9, 10, 11, 10, 9, 6, 6, 6, 3, 1, 3, 5, 6, 7, 7, 8, 8, 7, 9, 10, 9, 8, 10, 10, 8, 5, 4, 4, 3, 4, 5, 6, 7, 7, 6, 4], [10, 10, 10, 9, 10, 11, 10, 9, 8, 7, 8, 10, 7, 5, 4, 3, 3, 5, 5, 6, 7, 7, 6, 6, 9, 11, 12, 12, 10, 8, 6, 5, 5, 5, 5, 5, 6, 7, 7, 8, 8, 8, 8, 8, 8, 8, 9, 9, 8, 7, 6, 5, 4, 4, 4, 5, 5, 5, 4, 2], [10, 10, 10, 10, 10, 10, 9, 8, 7, 7, 8, 10, 7, 4, 3, 3, 4, 5, 5, 6, 7, 6, 6, 7, 9, 11, 12, 11, 11, 10, 6, 4, 6, 7, 7, 6, 6, 7, 7, 8, 8, 7, 7, 8, 7, 6, 7, 7, 8, 9, 8, 7, 5, 4, 5, 5, 5, 4, 3, 2], [10, 10, 10, 10, 10, 9, 9, 9, 8, 7, 6, 7, 6, 5, 4, 4, 5, 6, 5, 4, 5, 4, 5, 6, 7, 7, 9, 10, 10, 9, 7, 6, 6, 6, 6, 6, 6, 7, 7, 9, 9, 8, 8, 7, 6, 5, 6, 7, 8, 9, 8, 6, 5, 5, 6, 8, 8, 6, 6, 4], [9, 10, 10, 10, 9, 8, 10, 11, 9, 8, 4, 3, 5, 7, 6, 6, 7, 7, 5, 4, 3, 3, 3, 5, 4, 4, 5, 7, 8, 8, 7, 7, 6, 5, 5, 5, 5, 6, 7, 9, 10, 10, 8, 7, 6, 4, 6, 7, 9, 10, 7, 5, 5, 5, 8, 11, 10, 9, 8, 8], [10, 11, 10, 10, 9, 9, 10, 10, 9, 8, 4, 2, 4, 6, 8, 9, 10, 8, 7, 6, 4, 4, 3, 3, 3, 3, 4, 5, 6, 7, 7, 6, 5, 4, 4, 4, 3, 3, 5, 8, 10, 9, 7, 6, 6, 5, 7, 9, 9, 10, 8, 6, 6, 7, 9, 11, 11, 11, 9, 8], [12, 12, 10, 9, 9, 10, 10, 10, 8, 7, 5, 3, 3, 4, 9, 12, 11, 7, 8, 8, 6, 5, 4, 3, 3, 2, 4, 6, 6, 7, 6, 6, 4, 2, 3, 4, 1, 1, 4, 7, 8, 8, 7, 5, 6, 6, 8, 9, 10, 10, 9, 8, 8, 9, 10, 10, 12, 12, 9, 7], [10, 9, 9, 9, 9, 9, 8, 7, 6, 6, 4, 3, 4, 6, 9, 10, 10, 7, 7, 7, 6, 5, 4, 4, 5, 5, 6, 7, 6, 6, 5, 4, 4, 3, 3, 4, 3, 2, 5, 7, 9, 9, 8, 6, 6, 6, 7, 8, 9, 9, 8, 8, 9, 11, 12, 13, 13, 12, 10, 8], [7, 6, 7, 10, 9, 8, 6, 4, 4, 5, 4, 4, 6, 8, 7, 7, 7, 7, 6, 5, 5, 5, 4, 5, 7, 9, 9, 8, 7, 7, 5, 4, 5, 5, 4, 5, 4, 4, 5, 6, 8, 9, 8, 6, 5, 5, 6, 7, 8, 9, 8, 7, 10, 12, 14, 14, 13, 11, 11, 10], [8, 8, 7, 6, 5, 5, 4, 3, 2, 3, 3, 3, 5, 7, 7, 6, 6, 6, 6, 6, 5, 5, 5, 7, 8, 8, 9, 9, 8, 7, 7, 6, 7, 7, 5, 3, 3, 4, 4, 5, 6, 6, 6, 6, 6, 7, 8, 8, 9, 10, 9, 8, 10, 12, 13, 13, 13, 12, 10, 8], [8, 9, 7, 3, 2, 2, 2, 2, 1, 1, 2, 3, 4, 7, 6, 4, 5, 6, 6, 7, 6, 5, 6, 8, 8, 8, 8, 8, 7, 7, 8, 8, 9, 9, 5, 2, 2, 4, 4, 4, 4, 3, 4, 6, 7, 9, 9, 8, 10, 11, 10, 9, 10, 11, 11, 12, 12, 12, 9, 7], [7, 8, 6, 4, 4, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 6, 7, 6, 7, 6, 5, 5, 6, 7, 8, 9, 9, 8, 7, 8, 9, 10, 11, 8, 5, 5, 6, 4, 2, 2, 2, 3, 6, 7, 9, 9, 9, 10, 9, 8, 7, 8, 10, 10, 10, 11, 11, 9, 6], [7, 8, 7, 6, 6, 5, 5, 5, 5, 4, 5, 5, 3, 2, 3, 5, 6, 8, 7, 7, 6, 5, 5, 4, 6, 8, 9, 9, 8, 6, 8, 9, 10, 11, 9, 8, 7, 7, 5, 3, 3, 3, 4, 7, 8, 9, 10, 10, 9, 7, 7, 6, 6, 7, 8, 9, 10, 10, 8, 7], [7, 9, 9, 8, 6, 5, 6, 7, 6, 5, 6, 6, 4, 3, 3, 2, 5, 7, 7, 7, 7, 6, 5, 4, 6, 8, 9, 9, 6, 5, 8, 10, 10, 10, 8, 7, 6, 5, 5, 5, 6, 6, 6, 7, 9, 9, 9, 9, 8, 7, 7, 7, 6, 5, 7, 9, 9, 9, 8, 6], [8, 9, 10, 11, 8, 5, 6, 8, 7, 5, 6, 8, 7, 6, 3, 0, 3, 7, 7, 7, 8, 7, 7, 6, 7, 8, 9, 9, 7, 6, 8, 11, 10, 9, 7, 5, 5, 5, 6, 8, 9, 10, 9, 8, 9, 9, 9, 8, 7, 6, 6, 7, 6, 4, 7, 9, 9, 8, 7, 5], [9, 9, 11, 12, 10, 8, 8, 8, 8, 6, 7, 8, 7, 6, 3, 1, 3, 5, 6, 7, 8, 9, 9, 8, 8, 8, 9, 10, 9, 7, 8, 9, 8, 8, 7, 5, 6, 8, 8, 9, 10, 12, 10, 10, 11, 11, 10, 9, 8, 6, 5, 6, 6, 5, 7, 8, 8, 9, 7, 5], [9, 10, 11, 11, 10, 10, 9, 9, 9, 8, 8, 8, 7, 6, 3, 1, 2, 4, 4, 6, 8, 9, 10, 10, 8, 7, 9, 11, 9, 8, 9, 8, 8, 8, 7, 4, 7, 10, 9, 8, 11, 13, 12, 11, 11, 11, 10, 9, 8, 7, 6, 5, 6, 7, 7, 7, 8, 8, 6, 4], [8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 6, 4, 3, 2, 2, 4, 4, 5, 8, 10, 10, 9, 8, 8, 9, 10, 10, 10, 10, 10, 9, 9, 8, 6, 6, 7, 7, 7, 9, 11, 11, 11, 11, 11, 10, 9, 8, 7, 5, 5, 6, 7, 7, 7, 6, 6, 7, 7], [5, 5, 5, 4, 5, 5, 5, 7, 7, 7, 7, 8, 5, 2, 2, 3, 2, 4, 4, 5, 8, 10, 9, 7, 7, 8, 9, 9, 10, 11, 11, 11, 10, 9, 9, 9, 7, 5, 5, 6, 8, 10, 10, 11, 11, 11, 11, 9, 7, 6, 4, 4, 7, 7, 6, 6, 5, 4, 7, 10]]
    la_map = Map(topology=topologie, ports=ports, tideLevels=TideLevels(2, 3))
    tick = Tick(
        currentLocation=Position(row=12, column=12),
        map=la_map,
        currentTick=1,
        totalTicks=1,
        isOver=False,
        tideSchedule=[3],
        visitedPortIndices=[],
        spawnLocation=Position(row=0, column=0),
    )
    bot.get_next_move(tick)
    

